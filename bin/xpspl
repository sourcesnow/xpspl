#!/usr/bin/env php
<?php
/**
 * Directly runs files into the XPSPL Processor
 */
$usage =
"usage: xpspl [-c|--config=<file>] [-d] [-h|--help] [-p|--passthru] [--test]
              [--test-cover] [-v|--version] [-j|--judy]

              <file>
Options:
  -c/--config   Load the giving file for configuration
  -d            XPSPL Debug Mode
  -h/--help     Show this help message.
  -j/--judy     Enable judy support
  -p/--passthru Ignore any subsequent arguments and pass to <file>.
  --test        Run the XPSPL unit tests.
  --test-cover  Run unit tests and generate code coverage.
  -v/--version  Displays current XPSPL version.
";

$sync = false;
$ttr = null;
$runfile = false;
array_shift($argv);
if (count($argv) === 0) {
    goto start;
}
// last param is file
$runfile = $argv[count($argv) - 1];
// if - is first char ignore file
if (strpos($runfile, '-')) {
    $runfile = false;
}

$options = getopt(
    'qwert:yuiopasdfghjklzxc:vbnm',
    [
        'help', 'config:', 'version', 'time:', 'test', 'test-cover',
        'judy'
    ]
);

$tmp = $argv;
$unittesting = false;
$coverage = false;

// parse args and check for options
foreach ($options as $_i => $_arg) {
    // Hack
    $break = false;
    switch ($_i) {
        case 'j':
        case 'judy':
            define('XPSPL_JUDY_SUPPORT', true);
            break;
        case 'p':
        case 'passthru':
            $break = true;
            break;
        // case 't':
        // case 'time':
        //     if (false === $_arg || !is_int($_arg + 0)) {
        //         exit("invalid time 't'\n".$usage);
        //     }
        //     $ttr = $_arg;
        //     define('XPSPL_RUNTIME', $_arg);
        //     break;
        case 'h':
        case 'help':
            exit($usage);
            break;
        case 'v':
        case 'version':
            $showversion = true;
            break;
        case 'c':
        case 'config':
            include($_arg);
            break;
        case 'd':
            define('XPSPL_DEBUG', true);
            define('LOGGER_BLOCK', true);
            define('GENERATE_CODE_COVERAGE', true);
            define('SHORT_VARS', false);
            define('VERBOSITY_LEVEL', 2);
            define('XPSPL_LOG_LOCATION', '/var/log/xpspl/debug.log');
            break;
        case 'test':
        case 'test-cover':
            $unittest = true;
            if ($_i === 'test-cover') {
                define('GENERATE_CODE_COVERAGE', true);
            }
            break;
        // case 'update':
        //     fputs(STDOUT, 'Are you sure you want to update? [y/n] ');
        //     $stdin = fopen('php://stdin', 'r');
        //     $line = fgets($stdin);
        //     if(trim($line) == 'y') {
        //         exec('sudo '.dirname(realpath(__FILE__)).'/../install');
        //         echo "Done".PHP_EOL;
        //     }
        //     exit(0);
        //     break;
        default:
            exit(sprintf(
                "Unknown option '%s'\n%s",
                $_i,
                $usage
            ));
            break;
    }
    if ($break) break;
}

start:

// load XPSPL
if (!class_exists('XPSPL')) {
    require_once dirname(realpath(__FILE__)).'/../__init__.php';
}

if (isset($showversion)) {
    echo 'XPSPL Version '.XPSPL_VERSION.PHP_EOL;
    echo XPSPL_MASTERMIND.PHP_EOL;
    exit(0);
}

if (isset($unittest)) {
    require XPSPL_PATH.'/tests/all.php';
    goto loop;
}

if (false !== $runfile) {
    if (!file_exists($runfile)) {
        echo ("Could not open $runfile\n");
        exit(1);
    } else {
        require_once $runfile;
    }
} else {
    exit(1);
}

loop:
// start the loop!!
wait_loop($ttr);